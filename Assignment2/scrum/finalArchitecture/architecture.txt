# Architecture

# MVC
# ModelClasses
	PaintModel
# ViewClasses
	PaintView
	PropertiesPanel
	ShapeChooserPanel

# ControllerClasses
	PaintController

# (other logical  ways of collecting your classes)
# Paint Modes
    Shape
    Circle
    Oval
    Polygon
    Polyline
    Rectangle
    SmartShape
    Square
    Squiggle
    Text
    Triangle

# MenuBar Classes
    Command
    CommandCopy
    CommandCopyright
    CommandCut
    CommandDarkMode
    CommandExit
    CommandLightMode
    CommandMenuBar
    CommandNew
    CommandOpen
    CommandPaste
    CommandRedo
    CommandUndo

# Mode Strategies
    ModeStrategy
    DrawModeStrategy
    ObjectEraserStrategy
    PaintStrategy
    PolylineModeStrategy
    SelectModeStrategy
    TextModeStrategy
	
# Design Patterns Used (collections of classes into DP)
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: PaintView/PaintModel
Pattern Name: Observer/Observable
Reference:
	https://www.oodesign.com/images/design_patterns/behavioral/observer_implementation_-_uml_class_diagram.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)
	This pattern is used in order to implement the MVC pattern, which follows the principle of dependency
	inversion. By doing this, the PaintView and PaintModel classes are decoupled and allows for more
	observers to monitor the PaintModel, which is open for extension but closed for modification.

UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).
	Refer to ObserverObservable.uml

Classes:
	(list classes involved and their roles based on Reference above)
	PaintPanel: Observer
	PaintModel: Observable

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)
	These classes should mainly be unchanged, save for situations where bugs need to be fixed
	or a big feature is being added to the application. For example, the addition of drawing layers
	is a jump in complexity compared to adding a new drawing mode, and requires changes to the model
	in order to implement.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: ModeStrategy
Pattern Name: Strategy
Reference:
	https://www.oodesign.com/images/design_patterns/behavioral/strategy_implementation_-_uml_class_diagram.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)
	The strategy pattern is implemented in order for the application to remain open to extension but closed
	to modification. In the case of this application, implementing the strategy design pattern is logical because
	the behavior of each drawing mode will differ from one another, causing the need for different method calls
	for different mouse events. Using the ModeStrategy interface, new drawing modes or ways to interact with the
	canvas can be added without changing any code within the PaintModel.

UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).
	Refer to Strategy.uml

Classes:
	(list classes involved and their roles based on Reference above)
	PaintModel: Context
	ModeStrategy: IStrategy
	DrawModeStrategy: ConcreteStrategyA
	SelectModeStrategy: ConcreteStrategyB
    ObjectEraserStrategy: ConcreteStrategyC
    PolylineModeStrategy: ConcreteStrategyD
    TextModeStrategy: ConcreteStrategyE

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)
	This design pattern may be interacted with when attempting to implement a
	new mode to the canvas. Developers should check whether their new feature
	is compatible with any of the existing ModeStrategy implementations. If not,
	they should create a new class that extends ModeStrategy and implement their
	desired behaviour for the new mode.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
Name: ModeStrategyFactory
Pattern Name: Factory
Reference: (link to a specific version of a DP in https://www.oodesign.com/), for example...
	https://www.oodesign.com/images/stories/factory%20implementation.gif

Purpose:
	(why is this pattern implemented? think SOLID as possible reasons and explain in terms of the application)
	The factory design pattern is implemented to maintain the open/closed principle. In the case of the application,
	the PaintController does not know which ModeStrategy to use. The use of the ModeStrategyFactory allows for
	new ModeStrategy classes to be added as features without changing the code inside of PaintController.

UML:
	(include a UML or refer to one included in the finalArchitecture directory)
	(make it easy on us, and organize the diagram so that it looks like the
	reference pattern).
	Refer to Factory.uml

Classes:
	(list classes involved and their roles based on Reference above)
	ModeStrategyFactory: Factory
	PaintController: Client
	ModeStrategy: Product
	DrawModeStrategy/ObjectEraserStrategy/...: ConcreteStrategy

Usage:
	(Briefly describe why a developer would be playing with this part of
	the code and how they would use it to achieve that purpose)
	When adding a new feature and a new strategy must be implemented, a developer
	must add this concrete strategy into the ModeStrategyFactory so that the
	PaintController gains access to this strategy.

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
# High Level Architecture Discussion

	(Put all of the above together in a collection of stories which tell the
	developer how to modify, extend, or understand your code)

	(For each story, pull from and modify the highLevelTemplate.txt)
--------------------------------------------------------------------------------
New Drawing Mode:
Description:
	(description of what the feature is and how it is tied to the architecture
	application and the code...)

	A drawing mode enables a user to naturally draw a shape on the screen. The
	drawing mode consists of an image icon appearing in the left button panel.
	When the user clicks the image icon, the drawing mode is enabled. This means
	that a strategy for handling user input for this drawing mode is installed.

	Currently, the handling of the mouse events are done in the PaintController.
	In order for the PaintController to be able to correctly call the methods that
	each drawing mode requires, a ModeStrategy is used to direct the method calls.

	When a mouse event is detected, the PaintController creates an instance of some
	ModeStrategy class, which depends on the current drawing mode. The PaintController
	then figures out which input was detected and calls the respective method of the
	ModeStrategy.

	The ModeStrategy is aware of the behaviour from each class. Thus it can call the
	correct methods on the shape to attain the desired result.

Implementation:
	(inventory of ideas, required files, how they are tied to the architecture,
		naming conventions (example: images/ButtonIconSquare.jpg, MHStrategySquare, ShapeSquare...)

	To add a new drawing mode named X, provide a new class named X that extends Shape or some subclass
	of Shape (i.e. Square, Triangle, etc.) and implement the needed methods accordingly.

	Then, consider whether any of the existing ModeStrategy classes match the behaviour of X. If this is
	the case, then simply making sure that the right ModeStrategy is returned in ModeStrategyFactory is
	sufficient to make X functional. Otherwise, if none of the strategies will get X to work properly,
	create a new class called XStrategy (or another fitting name) that implements ModeStrategy or
	implements another concrete ModeStrategy. Implement the methods for each mouse event as necessary.
	Change the ModeStrategyFactory to be able to return XStrategy when the drawing mode is X.

	Finally, extend the ArrayList in ShapeChooserPanel to include X

	(list of aspects of code to touch to implement the new drawing mode)

	image icon: Create an SVG icon and place it into the 'svgs' array of ShapeChooserPanel. Make sure that
	the index of this SVG icon is the same as the index of the matching mode X.

	MouseHandlerStrategy:
		On a mouse event, the handle method inside PaintController is called. The PaintController will
		instantiate a new ModeStrategy using the ModeStrategyFactory and call its methods according to the
		given mouse event.

Example:
	The Circle drawing mode allows the user to begin creating a circle upon clicking and holding the left
	mouse button. This point is the center of the circle. Dragging while the left mouse button is pressed
	will resize the circle so that the radius is touching the mouse, keeping the center in the initial position.
	The user can release the button to finalize the circle, which stops the resizing and continue drawing other
	shapes on the canvas.

	This class extends the Oval class because its implementation is very similar. This drawing mode also falls into
	the DrawingModeStrategy category for shapes.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
New Panel:
Description:
	A new panel is a feature that changes the way the entire model behaves, more than just adding a
	new drawing mode. For example, a panel that allows for a variety of colors and border thickness of shapes
	makes a significant difference to the function of the model.

	The panel should implement some kind of EventHandler to get user input in order to change the PaintModel.
	The panel does not directly update the PaintModel. Instead, a reference to the panel is stored in the
	PaintController, which gets and sends the information to the PaintModel whenever a gesture is detected.
	The PaintModel will know what to do with the information, and changes itself accordingly.

Implementation:
	(inventory of ideas, required files, how they are tied to the architecture,
		naming conventions (example: images/ButtonIconSquare.jpg, MHStrategySquare, ShapeSquare...)

	Suppose that a developer wanted to add a panel called X. A class named XPanel should be created and
	implement some kind of EventHandler. The visual aspects of the panel, such as buttons or sliders, should
	be created and placed accordingly within the application window. The handle method should change some field
	inside of XPanel. A getter for this information should also be implemented.

	Inside of the PaintController, a reference to XPanel should be stored. Upon the invocation of the handle method
	inside of PaintController, it should relay the information from the XPanel to the PaintModel.

	Change the PaintModel accordingly to make XPanel functional.

Example:
	For example, the PropertiesPanel allows users to change the colour, opacity, border colour, and border thickness
	of the shapes that they are drawing. The handle method updates
--------------------------------------------------------------------------------